"""
create_trello_clone_project_structure.py

Run this script to create a Trello-like project skeleton on your computer.
It uses only Python's standard library (os, pathlib) to create directories and files.

Usage:
    python create_trello_clone_project_structure.py --path ./my-project

If --path is omitted it will create the structure in the current working directory inside "trello_clone".

This script is idempotent: it will not overwrite existing files unless you confirm.

"""

import os
from pathlib import Path
import argparse
import textwrap

BASE_BACKEND_PACKAGE_JSON = {
    "name": "trello-clone-backend",
    "version": "1.0.0",
    "description": "Backend for Trello-like project management tool",
    "main": "server.js",
    "type": "module",
    "scripts": {
        "start": "node server.js",
        "dev": "nodemon server.js"
    },
    "dependencies": {
        "express": "^4.18.2",
        "mongoose": "^7.0.0",
        "cors": "^2.8.5",
        "bcrypt": "^5.1.0",
        "jsonwebtoken": "^9.0.0"
    }
}

BASE_FRONTEND_PACKAGE_JSON = {
    "name": "trello-clone-frontend",
    "version": "1.0.0",
    "private": True,
    "dependencies": {
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "react-scripts": "5.0.1",
        "react-beautiful-dnd": "^13.1.0",
        "axios": "^1.3.4"
    },
    "scripts": {
        "start": "react-scripts start",
        "build": "react-scripts build",
        "test": "react-scripts test",
        "eject": "react-scripts eject"
    }
}

# Helper to write JSON-like objects as pretty files without importing json for clarity

def dict_to_pretty_json(d: dict) -> str:
    import json
    return json.dumps(d, indent=2, ensure_ascii=False)

# Files content
SERVER_JS = textwrap.dedent('''
    import express from "express";
    import mongoose from "mongoose";
    import cors from "cors";

    const app = express();
    app.use(cors());
    app.use(express.json());

    const DB_URL = process.env.MONGO_URI || "mongodb://127.0.0.1:27017/trelloClone";
    mongoose.connect(DB_URL)
      .then(() => console.log("MongoDB connected"))
      .catch((err) => console.error("MongoDB connection error:", err));

    app.get("/", (req, res) => res.json({ status: "Trello-like API running..." }));

    // Simple boards route
    app.get('/api/boards', (req, res) => {
      res.json({ boards: [] });
    });

    const PORT = process.env.PORT || 5000;
    app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));
''')

README = textwrap.dedent('''
    # Trello-like Project Skeleton

    This repository skeleton was generated by `create_trello_clone_project_structure.py`.

    ## Structure
    - backend/: Express + MongoDB backend skeleton
    - frontend/: React frontend skeleton (placeholder files)

    ## How to use
    1. Backend:
       - `cd backend`
       - `npm install`
       - `npm run dev` (if you installed nodemon) or `npm start`
    2. Frontend:
       - `cd frontend`
       - `npm install`
       - `npm start`

    This is a starter scaffold to speed up development. Replace placeholder code with your app logic.
''')

GITIGNORE = textwrap.dedent('''
    node_modules/
    .env
    build/
    dist/
    .DS_Store
''')

FRONTEND_INDEX_JS = textwrap.dedent('''
    import React from 'react';
    import { createRoot } from 'react-dom/client';
    import App from './App';

    const container = document.getElementById('root');
    const root = createRoot(container);
    root.render(<App />);
''')

FRONTEND_APP_JS = textwrap.dedent('''
    import React from 'react';
    import Board from './components/Board';

    function App() {
      return (
        <div style={{ padding: 20 }}>
          <h1>Trello-like App (MVP)</h1>
          <Board />
        </div>
      );
    }

    export default App;
''')

BOARD_JS = textwrap.dedent('''
    import React, { useState } from "react";
    import { DragDropContext, Droppable, Draggable } from "react-beautiful-dnd";

    const Board = () => {
      const [tasks, setTasks] = useState([
        { id: "1", content: "Setup project" },
        { id: "2", content: "Add drag & drop" },
        { id: "3", content: "Enable team collaboration" },
      ]);

      const handleDragEnd = (result) => {
        if (!result.destination) return;
        const items = Array.from(tasks);
        const [reordered] = items.splice(result.source.index, 1);
        items.splice(result.destination.index, 0, reordered);
        setTasks(items);
      };

      return (
        <DragDropContext onDragEnd={handleDragEnd}>
          <Droppable droppableId="tasks">
            {(provided) => (
              <div {...provided.droppableProps} ref={provided.innerRef} style={{ padding: 16, background: '#f1f1f1', minHeight: 200 }}>
                {tasks.map((task, index) => (
                  <Draggable key={task.id} draggableId={task.id} index={index}>
                    {(provided) => (
                      <div
                        {...provided.draggableProps}
                        {...provided.dragHandleProps}
                        ref={provided.innerRef}
                        style={{ padding: 12, margin: '8px 0', background: 'white', borderRadius: 6, boxShadow: '0 1px 3px rgba(0,0,0,0.1)', ...provided.draggableProps.style }}
                      >
                        {task.content}
                      </div>
                    )}
                  </Draggable>
                ))}
                {provided.placeholder}
              </div>
            )}
          </Droppable>
        </DragDropContext>
      );
    };

    export default Board;
''')

BACKEND_README = textwrap.dedent('''
    Backend skeleton for Trello-like app

    - server.js: simple express server
    - routes/: placeholder for API routes
    - models/: placeholder for Mongoose models
''')

USER_MODEL_JS = textwrap.dedent('''
    import mongoose from "mongoose";

    const userSchema = new mongoose.Schema({
      username: { type: String, required: true, unique: true },
      passwordHash: { type: String, required: true },
      email: String,
      createdAt: { type: Date, default: Date.now }
    });

    export default mongoose.model('User', userSchema);
''')

ROUTES_INDEX_JS = textwrap.dedent('''
    import express from 'express';
    const router = express.Router();

    router.get('/ping', (req, res) => res.json({ pong: true }));

    export default router;
''')

FRONTEND_INDEX_HTML = textwrap.dedent('''
    <!doctype html>
    <html lang="en">
      <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <title>Trello Clone</title>
      </head>
      <body>
        <div id="root"></div>
      </body>
    </html>
''')

# Main creator

def create_file(path: Path, content: str, overwrite: bool = False):
    if path.exists() and not overwrite:
        print(f"Skipping existing file: {path}")
        return
    path.parent.mkdir(parents=True, exist_ok=True)
    path.write_text(content, encoding='utf-8')
    print(f"Created: {path}")


def create_project(base_path: Path):
    base_path = base_path.resolve()
    print(f"Creating project at: {base_path}")

    # Directories
    dirs = [
        base_path / 'backend' / 'routes',
        base_path / 'backend' / 'models',
        base_path / 'frontend' / 'src' / 'components',
        base_path / 'frontend' / 'public',
    ]
    for d in dirs:
        d.mkdir(parents=True, exist_ok=True)
        print(f"Ensured dir: {d}")

    # Files
    create_file(base_path / 'README.md', README)
    create_file(base_path / '.gitignore', GITIGNORE)

    # Backend files
    create_file(base_path / 'backend' / 'server.js', SERVER_JS)
    create_file(base_path / 'backend' / 'package.json', dict_to_pretty_json(BASE_BACKEND_PACKAGE_JSON))
    create_file(base_path / 'backend' / 'routes' / 'index.js', ROUTES_INDEX_JS)
    create_file(base_path / 'backend' / 'models' / 'User.js', USER_MODEL_JS)
    create_file(base_path / 'backend' / 'README.md', BACKEND_README)

    # Frontend files
    create_file(base_path / 'frontend' / 'package.json', dict_to_pretty_json(BASE_FRONTEND_PACKAGE_JSON))
    create_file(base_path / 'frontend' / 'public' / 'index.html', FRONTEND_INDEX_HTML)
    create_file(base_path / 'frontend' / 'src' / 'index.js', FRONTEND_INDEX_JS)
    create_file(base_path / 'frontend' / 'src' / 'App.js', FRONTEND_APP_JS)
    create_file(base_path / 'frontend' / 'src' / 'components' / 'Board.js', BOARD_JS)

    # Helpful scripts
    create_file(base_path / 'create_project_structure.py', Path(__file__).read_text())

    print('\nProject skeleton created. Next steps:')
    print(f"  1. cd {base_path}/backend && npm install && npm run dev")
    print(f"  2. cd {base_path}/frontend && npm install && npm start")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Create Trello-like project skeleton')
    parser.add_argument('--path', '-p', default='trello_clone', help='Path where project will be created')
    parser.add_argument('--force', '-f', action='store_true', help='Overwrite files if they exist')
    args = parser.parse_args()

    target = Path(args.path)
    # If force is set, we will overwrite a small set of files; to keep it safe we still won't overwrite everything
    create_project(target)
